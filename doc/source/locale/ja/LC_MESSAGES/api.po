# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, MDR Inc.
# This file is distributed under the same license as the Queen package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: Queen \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-20 00:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/api/queen.rst:2
msgid "queen package"
msgstr "queenパッケージ"

#: ../../source/api/queen.rst:5
msgid "Submodules"
msgstr ""

#: ../../source/api/queen.rst:8
msgid "queen.circuit module"
msgstr ""

#: queen.circuit:1 of
msgid "This module defines Circuit and the setting for circuit."
msgstr ""

#: queen.QueenGlobalSetting:1 queen.Circuit:1
#: queen.circuit.QueenGlobalSetting:1 queen.circuit.Circuit:1
#: queen.vqe.AnsatzBase:1 queen.vqe.Vqe:1 queen.vqe.VqeResult:1
#: queen.wq.Opt:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: queen.QueenGlobalSetting:1 queen.circuit.QueenGlobalSetting:1 of
msgid "Setting for Queen."
msgstr ""

#: queen.QueenGlobalSetting.get_default_backend_name:1
#: queen.circuit.QueenGlobalSetting.get_default_backend_name:1 of
msgid "Get the default backend name."
msgstr ""

#: queen.QueenGlobalSetting.get_default_backend_name:3
#: queen.Circuit.get_default_backend_name:3 queen.Circuit.run:18
#: queen.circuit.QueenGlobalSetting.get_default_backend_name:3
#: queen.circuit.Circuit.get_default_backend_name:3
#: queen.circuit.Circuit.run:18 queen.pauli.Term.from_chars:8
#: queen.pauli.Term.get_time_evolution:4 queen.pauli.commutator:7
#: queen.pauli.is_commutable:9 queen.pauli.pauli_from_char:8
#: queen.pauli.qubo_bit:6 queen.pauli.term_from_chars:8
#: queen.pauli.to_expr:6 queen.pauli.to_term:6
#: queen.vqe.sparse_expectation:8 queen.wq.qn_to_qubo:5 of
msgid "Returns:"
msgstr ""

#: queen.QueenGlobalSetting.get_default_backend_name:4
#: queen.Circuit.get_default_backend_name:4
#: queen.circuit.QueenGlobalSetting.get_default_backend_name:4
#: queen.circuit.Circuit.get_default_backend_name:4 of
msgid "str: The name of default backend."
msgstr ""

#: queen.QueenGlobalSetting.register_backend:1
#: queen.circuit.QueenGlobalSetting.register_backend:1 of
msgid "Register new backend."
msgstr ""

#: queen.QueenGlobalSetting.register_backend:8
#: queen.QueenGlobalSetting.register_gate:7
#: queen.QueenGlobalSetting.register_macro:7
#: queen.QueenGlobalSetting.unregister_backend:4
#: queen.QueenGlobalSetting.unregister_gate:4
#: queen.QueenGlobalSetting.unregister_macro:4
#: queen.Circuit.set_default_backend:13
#: queen.circuit.QueenGlobalSetting.register_backend:8
#: queen.circuit.QueenGlobalSetting.register_gate:7
#: queen.circuit.QueenGlobalSetting.register_macro:7
#: queen.circuit.QueenGlobalSetting.unregister_backend:4
#: queen.circuit.QueenGlobalSetting.unregister_gate:4
#: queen.circuit.QueenGlobalSetting.unregister_macro:4
#: queen.circuit.Circuit.set_default_backend:13
#: queen.pauli.Term.from_chars:5 queen.pauli.commutator:5
#: queen.pauli.is_commutable:7 queen.pauli.pauli_from_char:5
#: queen.pauli.qubo_bit:4 queen.pauli.term_from_chars:5
#: queen.pauli.to_expr:4 queen.pauli.to_term:4
#: queen.vqe.sparse_expectation:5 queen.wq.make_qs:5
#: queen.wq.nbody_separation:4 queen.wq.qn_to_qubo:3 of
msgid "Args:"
msgstr ""

#: queen.QueenGlobalSetting.register_backend
#: queen.circuit.QueenGlobalSetting.register_backend of
msgid "name (str): The name of backend."
msgstr ""

#: queen.QueenGlobalSetting.register_backend
#: queen.circuit.QueenGlobalSetting.register_backend of
msgid "gateclass (type): The type object of backend"
msgstr ""

#: queen.QueenGlobalSetting.register_backend
#: queen.circuit.QueenGlobalSetting.register_backend of
msgid ""
"allow_overwrite (bool, optional): If True, allow to overwrite the "
"existing backend."
msgstr ""

#: queen.QueenGlobalSetting.register_backend:8
#: queen.QueenGlobalSetting.register_gate
#: queen.QueenGlobalSetting.register_macro
#: queen.circuit.QueenGlobalSetting.register_backend:8
#: queen.circuit.QueenGlobalSetting.register_gate
#: queen.circuit.QueenGlobalSetting.register_macro of
msgid "Otherwise, raise the ValueError."
msgstr ""

#: queen.QueenGlobalSetting.register_backend:11
#: queen.QueenGlobalSetting.register_gate:10
#: queen.QueenGlobalSetting.register_macro:10
#: queen.QueenGlobalSetting.set_default_backend:5
#: queen.QueenGlobalSetting.unregister_backend:6
#: queen.QueenGlobalSetting.unregister_gate:6
#: queen.QueenGlobalSetting.unregister_macro:6 queen.Circuit.run:20
#: queen.Circuit.set_default_backend:15
#: queen.circuit.QueenGlobalSetting.register_backend:11
#: queen.circuit.QueenGlobalSetting.register_gate:10
#: queen.circuit.QueenGlobalSetting.register_macro:10
#: queen.circuit.QueenGlobalSetting.set_default_backend:5
#: queen.circuit.QueenGlobalSetting.unregister_backend:6
#: queen.circuit.QueenGlobalSetting.unregister_gate:6
#: queen.circuit.QueenGlobalSetting.unregister_macro:6
#: queen.circuit.Circuit.run:20
#: queen.circuit.Circuit.set_default_backend:15
#: queen.pauli.Term.from_chars:10 queen.pauli.pauli_from_char:10
#: queen.pauli.term_from_chars:10 of
msgid "Raises:"
msgstr ""

#: queen.QueenGlobalSetting.register_backend:11
#: queen.circuit.QueenGlobalSetting.register_backend:11 of
msgid "ValueError: The name is duplicated with existing backend."
msgstr ""

#: queen.QueenGlobalSetting.register_backend:12
#: queen.QueenGlobalSetting.register_gate:11
#: queen.QueenGlobalSetting.register_macro:11
#: queen.circuit.QueenGlobalSetting.register_backend:12
#: queen.circuit.QueenGlobalSetting.register_gate:11
#: queen.circuit.QueenGlobalSetting.register_macro:11 of
msgid "When `allow_overwrite=True`, this error is not raised."
msgstr ""

#: queen.QueenGlobalSetting.register_gate:1
#: queen.circuit.QueenGlobalSetting.register_gate:1 of
msgid "Register new gate to gate set."
msgstr ""

#: queen.QueenGlobalSetting.register_gate
#: queen.circuit.QueenGlobalSetting.register_gate of
msgid "name (str): The name of gate."
msgstr ""

#: queen.QueenGlobalSetting.register_gate
#: queen.circuit.QueenGlobalSetting.register_gate of
msgid "gateclass (type): The type object of gate."
msgstr ""

#: queen.QueenGlobalSetting.register_gate
#: queen.circuit.QueenGlobalSetting.register_gate of
msgid ""
"allow_overwrite (bool, optional): If True, allow to overwrite the "
"existing gate."
msgstr ""

#: queen.QueenGlobalSetting.register_gate:10
#: queen.circuit.QueenGlobalSetting.register_gate:10 of
msgid "ValueError: The name is duplicated with existing gate."
msgstr ""

#: queen.QueenGlobalSetting.register_macro:1
#: queen.circuit.QueenGlobalSetting.register_macro:1 of
msgid "Register new macro to Circuit."
msgstr ""

#: queen.QueenGlobalSetting.register_macro
#: queen.circuit.QueenGlobalSetting.register_macro of
msgid "name (str): The name of macro."
msgstr ""

#: queen.QueenGlobalSetting.register_macro
#: queen.circuit.QueenGlobalSetting.register_macro of
msgid "func (callable): The function to be called."
msgstr ""

#: queen.QueenGlobalSetting.register_macro
#: queen.circuit.QueenGlobalSetting.register_macro of
msgid ""
"allow_overwrite (bool, optional): If True, allow to overwrite the "
"existing macro."
msgstr ""

#: queen.QueenGlobalSetting.register_macro:10
#: queen.circuit.QueenGlobalSetting.register_macro:10 of
msgid "ValueError: The name is duplicated with existing macro, gate or method."
msgstr ""

#: queen.QueenGlobalSetting.remove_backend:1
#: queen.circuit.QueenGlobalSetting.remove_backend:1 of
msgid "This method is deperecated. Use `unregister_backend` method."
msgstr ""

#: queen.QueenGlobalSetting.set_default_backend:1
#: queen.circuit.QueenGlobalSetting.set_default_backend:1 of
msgid "Set the default backend to be used by `Circuit`. Args:"
msgstr ""

#: queen.QueenGlobalSetting.set_default_backend:3
#: queen.circuit.QueenGlobalSetting.set_default_backend:3 of
msgid "name (str): The name of the default backend."
msgstr ""

#: queen.QueenGlobalSetting.set_default_backend:6
#: queen.QueenGlobalSetting.unregister_backend:7
#: queen.circuit.QueenGlobalSetting.set_default_backend:6
#: queen.circuit.QueenGlobalSetting.unregister_backend:7 of
msgid "ValueError: Specified backend is not registered."
msgstr ""

#: queen.QueenGlobalSetting.unregister_backend:1
#: queen.circuit.QueenGlobalSetting.unregister_backend:1 of
msgid "Unregister a backend."
msgstr ""

#: queen.QueenGlobalSetting.unregister_backend:4
#: queen.circuit.QueenGlobalSetting.unregister_backend:4 of
msgid "name (str): The name of the backend to be unregistered."
msgstr ""

#: queen.QueenGlobalSetting.unregister_gate:1
#: queen.circuit.QueenGlobalSetting.unregister_gate:1 of
msgid "Unregister a gate from gate set"
msgstr ""

#: queen.QueenGlobalSetting.unregister_gate:4
#: queen.circuit.QueenGlobalSetting.unregister_gate:4 of
msgid "name (str): The name of the gate to be unregistered."
msgstr ""

#: queen.QueenGlobalSetting.unregister_gate:7
#: queen.QueenGlobalSetting.unregister_macro:7
#: queen.circuit.QueenGlobalSetting.unregister_gate:7
#: queen.circuit.QueenGlobalSetting.unregister_macro:7 of
msgid "ValueError: Specified gate is not registered."
msgstr ""

#: queen.QueenGlobalSetting.unregister_macro:1
#: queen.circuit.QueenGlobalSetting.unregister_macro:1 of
msgid "Unregister a macro."
msgstr ""

#: queen.QueenGlobalSetting.unregister_macro:4
#: queen.circuit.QueenGlobalSetting.unregister_macro:4 of
msgid "name (str): The name of the macro to be unregistered."
msgstr ""

#: queen.Circuit:1 queen.circuit.Circuit:1 of
msgid "Store the gate operations and call the backends."
msgstr ""

#: queen.Circuit.copy:1 queen.circuit.Circuit.copy:1 of
msgid "Copy the circuit."
msgstr ""

#: queen.Circuit.copy:4 queen.circuit.Circuit.copy:4 of
msgid "params:"
msgstr ""

#: queen.Circuit.copy queen.circuit.Circuit.copy of
msgid "copy_backends :bool copy backends if True."
msgstr ""

#: queen.Circuit.copy queen.circuit.Circuit.copy of
msgid "copy_default_backend :bool copy default_backend if True."
msgstr ""

#: queen.Circuit.dagger:1 queen.circuit.Circuit.dagger:1 of
msgid "Make Hermitian conjugate of the circuit."
msgstr ""

#: queen.Circuit.dagger:3 queen.circuit.Circuit.dagger:3 of
msgid "This feature is beta. Interface may be changed."
msgstr ""

#: queen.Circuit.dagger:6 queen.circuit.Circuit.dagger:6 of
msgid "ignore_measurement (bool, optional):"
msgstr ""

#: queen.Circuit.dagger queen.circuit.Circuit.dagger of
msgid "If True, ignore the measurement in the circuit."
msgstr ""

#: queen.Circuit.dagger queen.circuit.Circuit.dagger of
msgid "Otherwise, if measurement in the circuit, raises ValueError."
msgstr ""

#: queen.Circuit.get_default_backend_name:1
#: queen.circuit.Circuit.get_default_backend_name:1 of
msgid "Get the default backend of this circuit or global setting."
msgstr ""

#: queen.Circuit.make_cache:1 queen.circuit.Circuit.make_cache:1 of
msgid "Make a cache to reduce the time of run. Some backends may implemented it."
msgstr ""

#: queen.Circuit.make_cache:3 queen.circuit.Circuit.make_cache:3 of
msgid "This is temporary API. It may changed or deprecated."
msgstr ""

#: queen.Circuit.run:1 queen.circuit.Circuit.run:1 of
msgid "Run the circuit."
msgstr ""

#: queen.Circuit.run:3 queen.circuit.Circuit.run:3 of
msgid ""
"`Circuit` have several backends. When `backend` parameter is specified, "
"use specified backend, and otherwise, default backend is used. Other "
"parameters are passed to the backend."
msgstr ""

#: queen.Circuit.run:7 queen.circuit.Circuit.run:7 of
msgid ""
"The meaning of parameters are depends on the backend specifications. "
"However, following parameters are commonly used."
msgstr ""

#: queen.Circuit.run:15 queen.circuit.Circuit.run:15 of
msgid "Commonly used args (Depends on backend):"
msgstr ""

#: queen.Circuit.run queen.circuit.Circuit.run of
msgid "shots (int, optional): The number of sampling the circuit."
msgstr ""

#: queen.Circuit.run queen.circuit.Circuit.run of
msgid "returns (str, optional):  The category of returns value."
msgstr ""

#: queen.Circuit.run queen.circuit.Circuit.run of
msgid "e.g. \"statevector\" returns the state vector after run the circuit."
msgstr ""

#: queen.Circuit.run queen.circuit.Circuit.run of
msgid "\"shots\" returns the counter of measured value."
msgstr ""

#: queen.Circuit.run queen.circuit.Circuit.run of
msgid "token, url (str, optional): The token and URL for cloud resource."
msgstr ""

#: queen.Circuit.run:18 queen.Circuit.run:21 queen.circuit.Circuit.run:18
#: queen.circuit.Circuit.run:21 of
msgid "Depends on backend."
msgstr ""

#: queen.Circuit.set_default_backend:1
#: queen.circuit.Circuit.set_default_backend:1 of
msgid "Set the default backend of this circuit."
msgstr ""

#: queen.Circuit.set_default_backend:3
#: queen.circuit.Circuit.set_default_backend:3 of
msgid ""
"This setting is only applied for this circuit. If you want to change the "
"default backend of all gates, use "
"`QueenGlobalSetting.set_default_backend()`."
msgstr ""

#: queen.Circuit.set_default_backend:7
#: queen.circuit.Circuit.set_default_backend:7 of
msgid ""
"After set the default backend by this method, global setting is ignored "
"even if `QueenGlobalSetting.set_default_backend()` is called. If you "
"want to use global default setting, call this method with "
"backend_name=None."
msgstr ""

#: queen.Circuit.set_default_backend
#: queen.circuit.Circuit.set_default_backend of
msgid "backend_name (str or None): new default backend name."
msgstr ""

#: queen.Circuit.set_default_backend
#: queen.circuit.Circuit.set_default_backend of
msgid "If None is given, global setting is applied."
msgstr ""

#: queen.Circuit.set_default_backend:16
#: queen.circuit.Circuit.set_default_backend:16 of
msgid "ValueError: If `backend_name` is not registered backend."
msgstr ""

#: queen.Circuit.to_qasm:1 queen.circuit.Circuit.to_qasm:1 of
msgid "Returns the OpenQASM output of this circuit."
msgstr ""

#: queen.Circuit.to_unitary:1 queen.circuit.Circuit.to_unitary:1 of
msgid "Returns sympy unitary matrix of this circuit."
msgstr ""

#: ../../source/api/queen.rst:16
msgid "queen.gate module"
msgstr ""

#: queen.gate:1 of
msgid ""
"`gate` module implements quantum gate operations. This module is "
"internally used."
msgstr ""

#: queen.gate.CCZGate:1 queen.gate.CSwapGate:1 queen.gate.OneQubitGate:1
#: queen.gate.ToffoliGate:1 queen.gate.TwoQubitGate:1 of
msgid "Bases: :class:`queen.gate.Gate`"
msgstr ""

#: queen.gate.CCZGate:1 of
msgid "2-Controlled Z gate"
msgstr ""

#: queen.gate.CCZGate.dagger:1 queen.gate.CHGate.dagger:1
#: queen.gate.CPhaseGate.dagger:1 queen.gate.CRXGate.dagger:1
#: queen.gate.CRYGate.dagger:1 queen.gate.CRZGate.dagger:1
#: queen.gate.CSwapGate.dagger:1 queen.gate.CU1Gate.dagger:1
#: queen.gate.CU2Gate.dagger:1 queen.gate.CU3Gate.dagger:1
#: queen.gate.CXGate.dagger:1 queen.gate.CYGate.dagger:1
#: queen.gate.CZGate.dagger:1 queen.gate.Gate.dagger:1
#: queen.gate.HGate.dagger:1 queen.gate.IGate.dagger:1
#: queen.gate.Measurement.dagger:1 queen.gate.PhaseGate.dagger:1
#: queen.gate.RXGate.dagger:1 queen.gate.RXXGate.dagger:1
#: queen.gate.RYGate.dagger:1 queen.gate.RYYGate.dagger:1
#: queen.gate.RZGate.dagger:1 queen.gate.RZZGate.dagger:1
#: queen.gate.Reset.dagger:1 queen.gate.SDagGate.dagger:1
#: queen.gate.SGate.dagger:1 queen.gate.SwapGate.dagger:1
#: queen.gate.TDagGate.dagger:1 queen.gate.TGate.dagger:1
#: queen.gate.ToffoliGate.dagger:1 queen.gate.U1Gate.dagger:1
#: queen.gate.U2Gate.dagger:1 queen.gate.U3Gate.dagger:1
#: queen.gate.XGate.dagger:1 queen.gate.YGate.dagger:1
#: queen.gate.ZGate.dagger:1 of
msgid "Returns the Hermitian conjugate of `self`."
msgstr ""

#: queen.gate.CHGate:1 queen.gate.CPhaseGate:1 queen.gate.CRXGate:1
#: queen.gate.CRYGate:1 queen.gate.CRZGate:1 queen.gate.CU1Gate:1
#: queen.gate.CU2Gate:1 queen.gate.CU3Gate:1 queen.gate.CXGate:1
#: queen.gate.CYGate:1 queen.gate.CZGate:1 queen.gate.RXXGate:1
#: queen.gate.RYYGate:1 queen.gate.RZZGate:1 queen.gate.SwapGate:1 of
msgid "Bases: :class:`queen.gate.TwoQubitGate`"
msgstr ""

#: queen.gate.CHGate:1 of
msgid "Controlled-H gate"
msgstr ""

#: queen.gate.CHGate.fallback:1 queen.gate.CPhaseGate.fallback:1
#: queen.gate.CRXGate.fallback:1 queen.gate.CRYGate.fallback:1
#: queen.gate.CRZGate.fallback:1 queen.gate.CSwapGate.fallback:1
#: queen.gate.CU1Gate.fallback:1 queen.gate.CU2Gate.fallback:1
#: queen.gate.CU3Gate.fallback:1 queen.gate.CYGate.fallback:1
#: queen.gate.Gate.fallback:1 queen.gate.IGate.fallback:1
#: queen.gate.PhaseGate.fallback:1 queen.gate.RXXGate.fallback:1
#: queen.gate.RYYGate.fallback:1 queen.gate.RZZGate.fallback:1
#: queen.gate.SDagGate.fallback:1 queen.gate.SGate.fallback:1
#: queen.gate.SwapGate.fallback:1 queen.gate.TDagGate.fallback:1
#: queen.gate.TGate.fallback:1 queen.gate.ToffoliGate.fallback:1
#: queen.gate.U1Gate.fallback:1 queen.gate.U2Gate.fallback:1 of
msgid "Returns alternative gates to make equivalent circuit."
msgstr ""

#: queen.gate.CPhaseGate:1 of
msgid "Rotate-Z gate but phase is different."
msgstr ""

#: queen.gate.CRXGate:1 queen.gate.RXGate:1 of
msgid "Rotate-X gate"
msgstr ""

#: queen.gate.CRYGate:1 queen.gate.RYGate:1 of
msgid "Rotate-Y gate"
msgstr ""

#: queen.gate.CRZGate:1 queen.gate.RZGate:1 of
msgid "Rotate-Z gate"
msgstr ""

#: queen.gate.CSwapGate:1 of
msgid "Controlled SWAP gate"
msgstr ""

#: queen.gate.CU1Gate:1 of
msgid "Controlled U1 gate"
msgstr ""

#: queen.gate.CU1Gate:3 queen.gate.U1Gate:3 of
msgid ""
"U1 gate is as same as RZ gate and CU1 gate is as same as CPhase gate. It "
"is because for compatibility with IBM's implementations."
msgstr ""

#: queen.gate.CU1Gate:6 queen.gate.U1Gate:6 of
msgid ""
"You should probably use RZ/CRZ gates or Phase/CPhase gates instead of "
"U1/CU1 gates."
msgstr ""

#: queen.gate.CU2Gate:1 of
msgid "Controlled U2 gate"
msgstr ""

#: queen.gate.CU3Gate:1 of
msgid "Controlled U3 gate"
msgstr ""

#: queen.gate.CXGate:1 of
msgid "Controlled-X (CNOT) gate"
msgstr ""

#: queen.gate.CYGate:1 of
msgid "Controlled-Y gate"
msgstr ""

#: queen.gate.CZGate:1 of
msgid "Controlled-Z gate"
msgstr ""

#: queen.gate.Gate:1 of
msgid "Bases: :class:`abc.ABC`"
msgstr ""

#: queen.gate.Gate:1 of
msgid "Abstract quantum gate class."
msgstr ""

#: queen.gate.Gate.uppername:1 of
msgid "Upper name of the gate."
msgstr ""

#: queen.gate.HGate:1 queen.gate.IGate:1 queen.gate.Measurement:1
#: queen.gate.PhaseGate:1 queen.gate.RXGate:1 queen.gate.RYGate:1
#: queen.gate.RZGate:1 queen.gate.Reset:1 queen.gate.SDagGate:1
#: queen.gate.SGate:1 queen.gate.TDagGate:1 queen.gate.TGate:1
#: queen.gate.U1Gate:1 queen.gate.U2Gate:1 queen.gate.U3Gate:1
#: queen.gate.XGate:1 queen.gate.YGate:1 queen.gate.ZGate:1 of
msgid "Bases: :class:`queen.gate.OneQubitGate`"
msgstr ""

#: queen.gate.HGate:1 of
msgid "Hadamard gate"
msgstr ""

#: queen.gate.IGate:1 of
msgid "Identity gate"
msgstr ""

#: queen.gate.Measurement:1 of
msgid "Measurement operation"
msgstr ""

#: queen.gate.OneQubitGate:1 of
msgid "Abstract quantum gate class for 1 qubit gate."
msgstr ""

#: queen.gate.OneQubitGate.target_iter:1 of
msgid "The generator which yields the target qubits."
msgstr ""

#: queen.gate.PhaseGate:1 of
msgid "Rotate-Z gate but global phase is different."
msgstr ""

#: queen.gate.PhaseGate:3 of
msgid ""
"Global phase doesn't makes any difference of measured result. You may use"
" RZ gate or U1 gate instead, but distinguishing these gates may better "
"for debugging or future improvement."
msgstr ""

#: queen.gate.PhaseGate:7 of
msgid ""
"furthermore, phase gate may efficient for simulating. (It depends on "
"backend implementation. But matrix of phase gate is simpler than RZ gate "
"or U1 gate.)"
msgstr ""

#: queen.gate.RXXGate:1 of
msgid "Rotate-XX gate"
msgstr ""

#: queen.gate.RYYGate:1 of
msgid "Rotate-YY gate"
msgstr ""

#: queen.gate.RZZGate:1 of
msgid "Rotate-ZZ gate"
msgstr ""

#: queen.gate.Reset:1 of
msgid "Reset operation"
msgstr ""

#: queen.gate.SDagGate:1 of
msgid "Dagger of S gate"
msgstr ""

#: queen.gate.SGate:1 of
msgid "S gate"
msgstr ""

#: queen.gate.SwapGate:1 of
msgid "Swap gate"
msgstr ""

#: queen.gate.TDagGate:1 of
msgid "Dagger of T ($\\pi/8$) gate"
msgstr ""

#: queen.gate.TGate:1 of
msgid "T ($\\pi/8$) gate"
msgstr ""

#: queen.gate.ToffoliGate:1 of
msgid "Toffoli (CCX) gate"
msgstr ""

#: queen.gate.TwoQubitGate:1 of
msgid "Abstract quantum gate class for 2 qubits gate."
msgstr ""

#: queen.gate.TwoQubitGate.control_target_iter:1 of
msgid "The generator which yields the tuples of (control, target) qubits."
msgstr ""

#: queen.gate.U1Gate:1 of
msgid "U1 gate"
msgstr ""

#: queen.gate.U2Gate:1 of
msgid "U2 gate"
msgstr ""

#: queen.gate.U3Gate:1 of
msgid "U3 gate"
msgstr ""

#: queen.gate.XGate:1 of
msgid "Pauli's X gate"
msgstr ""

#: queen.gate.YGate:1 of
msgid "Pauli's Y gate"
msgstr ""

#: queen.gate.ZGate:1 of
msgid "Pauli's Z gate"
msgstr ""

#: queen.gate.find_n_qubits:1 of
msgid "Find n_qubits from gates"
msgstr ""

#: queen.gate.get_maximum_index:1 queen.gate.qubit_pairs:1
#: queen.gate.slicing:1 queen.gate.slicing_singlevalue:1 of
msgid "Internally used."
msgstr ""

#: ../../source/api/queen.rst:24
msgid "queen.pauli module"
msgstr ""

#: queen.pauli:1 of
msgid "The module for calculate Pauli matrices."
msgstr ""

#: queen.pauli.Expr:1 of
msgid "Bases: :class:`queen.pauli._ExprTuple`"
msgstr ""

#: queen.pauli.Expr.coeffs:1 of
msgid "Generator which yields a coefficent for each Term."
msgstr ""

#: queen.pauli.Expr.commutator:1 queen.pauli.Term.commutator:1 of
msgid "Returns commutator."
msgstr ""

#: queen.pauli.Expr.from_number:1 of
msgid "Make new Expr from a number"
msgstr ""

#: queen.pauli.Expr.from_term:1 of
msgid "Make new Expr from a Term"
msgstr ""

#: queen.pauli.Expr.from_terms_dict:1 queen.pauli.Expr.from_terms_iter:1
#: queen.pauli.Expr.terms_to_dict:1 queen.pauli.Term.from_ops_iter:1
#: queen.pauli.Term.join_ops:1 of
msgid "For internal use."
msgstr ""

#: queen.pauli.Expr.is_all_terms_commutable:1 of
msgid "Test whether all terms are commutable. This function may very slow."
msgstr ""

#: queen.pauli.Expr.is_commutable_with:1
#: queen.pauli.Term.is_commutable_with:1 of
msgid "Test whether `self` is commutable with `other`."
msgstr ""

#: queen.pauli.Expr.max_n:1 of
msgid ""
"Returns the maximum index of Pauli matrices in the Expr. If Expr is empty"
" or only constant and identity matrix, returns -1."
msgstr ""

#: queen.pauli.Expr.simplify:1 of
msgid "Simplify the Expr."
msgstr ""

#: queen.pauli.Expr.to_expr:1 queen.pauli.Term.to_term:1 of
msgid "Do nothing. This method is prepared to avoid TypeError."
msgstr ""

#: queen.pauli.Expr.to_matrix:1 queen.pauli.Term.to_matrix:1 of
msgid "Convert to the matrix."
msgstr ""

#: queen.pauli.Expr.zero:1 of
msgid "Returns 0 as Term"
msgstr ""

#: queen.pauli.Expr.is_identity:1 queen.pauli.Term.is_identity:1 of
msgid "If `self` is I, returns True, otherwise False."
msgstr ""

#: queen.pauli.Expr.n_qubits:1 of
msgid "Returns the number of qubits of the Term."
msgstr ""

#: queen.pauli.Expr.n_qubits:3 of
msgid "If Expr is empty or only constant and identity matrix, returns 0."
msgstr ""

#: queen.pauli.Term:1 of
msgid "Bases: :class:`queen.pauli._TermTuple`"
msgstr ""

#: queen.pauli.Term:1 of
msgid ""
"Multiplication of Pauli matrices with coefficient. Note that this class "
"is immutable."
msgstr ""

#: queen.pauli.Term:4 of
msgid ""
"Multiplied Pauli matrices are very important for quantum computation "
"because it is an unitary matrix (without coefficient) and also it can be "
"consider the time evolution of the term (with real coefficient) without "
"Suzuki-Trotter expansion."
msgstr ""

#: queen.pauli.Term.append_to_circuit:1 of
msgid "Append Pauli gates to `Circuit`."
msgstr ""

#: queen.pauli.Term.from_chars:1 of
msgid ""
"Make Pauli's Term from chars which is written by \"X\", \"Y\", \"Z\" or "
"\"I\". e.g. \"XZIY\" => X(0) * Z(1) * Y(3)"
msgstr ""

#: queen.pauli.Term.from_chars:5 queen.pauli.term_from_chars:5 of
msgid "chars (str): Written in \"X\", \"Y\", \"Z\" or \"I\"."
msgstr ""

#: queen.pauli.Term.from_chars:8 queen.pauli.term_from_chars:8
#: queen.pauli.to_term:7 of
msgid "Term: A `Term` object."
msgstr ""

#: queen.pauli.Term.from_chars:11 queen.pauli.term_from_chars:11 of
msgid ""
"ValueError: When chars conteins the character which is \"X\", \"Y\", "
"\"Z\" nor \"I\"."
msgstr ""

#: queen.pauli.Term.from_pauli:1 of
msgid "Make new Term from an Pauli operator"
msgstr ""

#: queen.pauli.Term.from_paulipair:1 of
msgid "Make new Term from two Pauli operator."
msgstr ""

#: queen.pauli.Term.get_time_evolution:1 of
msgid "Get the function to append the time evolution of this term."
msgstr ""

#: queen.pauli.Term.get_time_evolution:4 of
msgid "function(circuit: Circuit, t: float):"
msgstr ""

#: queen.pauli.Term.get_time_evolution:5 of
msgid "Add gates for time evolution to `circuit` with time `t`"
msgstr ""

#: queen.pauli.Term.max_n:1 of
msgid ""
"Returns the maximum index of Pauli matrices in the Term. If there's no "
"Pauli matrices, returns -1."
msgstr ""

#: queen.pauli.Term.n_iter:1 of
msgid ""
"Returns an iterator which yields indices for each Pauli matrices in the "
"Term."
msgstr ""

#: queen.pauli.Term.simplify:1 of
msgid "Simplify the Term."
msgstr ""

#: queen.pauli.Term.to_expr:1 of
msgid "Convert to Expr."
msgstr ""

#: queen.pauli.Term.n_qubits:1 of
msgid ""
"Returns the number of qubits of the term. If the term is constant with "
"identity matrix, n_qubits is 0."
msgstr ""

#: queen.pauli.commutator:1 of
msgid "Returns [expr1, expr2] = expr1 * expr2 - expr2 * expr1."
msgstr ""

#: queen.pauli.commutator queen.pauli.is_commutable of
msgid "expr1 (Expr, Term or Pauli operator): Pauli's expression."
msgstr ""

#: queen.pauli.commutator queen.pauli.is_commutable of
msgid "expr2 (Expr, Term or Pauli operator): Pauli's expression."
msgstr ""

#: queen.pauli.commutator:8 of
msgid "Expr: expr1 * expr2 - expr2 * expr1."
msgstr ""

#: queen.pauli.is_commutable:1 of
msgid "Test whether expr1 and expr2 are commutable."
msgstr ""

#: queen.pauli.is_commutable of
msgid ""
"eps (float, optional): Machine epsilon.   If | \\[expr1, expr2 \\]| < "
"eps, consider it is commutable."
msgstr ""

#: queen.pauli.is_commutable:10 of
msgid "bool: if expr1 and expr2 are commutable, returns True, otherwise False."
msgstr ""

#: queen.pauli.pauli_from_char:1 of
msgid "Make Pauli matrix from an character."
msgstr ""

#: queen.pauli.pauli_from_char of
msgid "ch (str): \"X\" or \"Y\" or \"Z\" or \"I\"."
msgstr ""

#: queen.pauli.pauli_from_char of
msgid "n (int, optional): Make Pauli matrix as n-th qubits."
msgstr ""

#: queen.pauli.pauli_from_char:8 of
msgid "If ch is \"X\" => X, \"Y\" => Y, \"Z\" => Z, \"I\" => I"
msgstr ""

#: queen.pauli.pauli_from_char:11 of
msgid "ValueError: When ch is not \"X\", \"Y\", \"Z\" nor \"I\"."
msgstr ""

#: queen.pauli.qubo_bit:1 of
msgid "Represent QUBO's bit to Pauli operator of Ising model."
msgstr ""

#: queen.pauli.qubo_bit:4 of
msgid "n (int): n-th bit in QUBO"
msgstr ""

#: queen.pauli.qubo_bit:7 of
msgid "Expr: Pauli expression of QUBO bit."
msgstr ""

#: queen.pauli.term_from_chars:1 of
msgid ""
"Make Pauli's Term from chars which is written by \"X\", \"Y\", \"Z\" or "
"\"I\". e.g. \"XZIY\" => X(3) * Z(2) * Y(0)"
msgstr ""

#: queen.pauli.to_expr:1 of
msgid "Convert to Expr from Term or Pauli operator (X, Y, Z, I)."
msgstr ""

#: queen.pauli.to_expr:4 of
msgid "term: (Term, X, Y, Z or I): A Term or Pauli operator."
msgstr ""

#: queen.pauli.to_expr:7 of
msgid "Expr: An `Expr` object."
msgstr ""

#: queen.pauli.to_term:1 of
msgid "Convert to Term from Pauli operator (X, Y, Z, I)."
msgstr ""

#: queen.pauli.to_term:4 of
msgid "pauli (X, Y, Z or I): A Pauli operator"
msgstr ""

#: ../../source/api/queen.rst:32
msgid "queen.vqe module"
msgstr ""

#: queen.vqe.AnsatzBase.get_circuit:1 queen.vqe.QaoaAnsatz.get_circuit:1 of
msgid "Make a circuit from parameters."
msgstr ""

#: queen.vqe.AnsatzBase.get_energy:1 of
msgid "Calculate energy from circuit and sampler."
msgstr ""

#: queen.vqe.AnsatzBase.get_energy_sparse:1 of
msgid ""
"Get energy using sparse matrix. This method may be changed in the future "
"release."
msgstr ""

#: queen.vqe.AnsatzBase.get_objective:1 of
msgid "Get an objective function to be optimized."
msgstr ""

#: queen.vqe.AnsatzBase.make_sparse:1 of
msgid "Make sparse matrix. This method may be changed in the future release."
msgstr ""

#: queen.vqe.QaoaAnsatz:1 of
msgid "Bases: :class:`queen.vqe.AnsatzBase`"
msgstr ""

#: queen.vqe.QaoaAnsatz:1 of
msgid "Ansatz for QAOA."
msgstr ""

#: queen.vqe.QaoaAnsatz.check_hamiltonian:1 of
msgid "Check hamiltonian is commutable. This condition is required for QaoaAnsatz"
msgstr ""

#: queen.vqe.Vqe.result:1 of
msgid "Vqe.result is deprecated. Use `result = Vqe.run()`."
msgstr ""

#: queen.vqe.VqeResult.get_probs:1 of
msgid "Get probabilities."
msgstr ""

#: queen.vqe.VqeResult.probs:1 of
msgid "Get probabilities. This property is obsoleted. Use get_probs()."
msgstr ""

#: queen.vqe.expect:1 of
msgid "For the VQE simulation without sampling."
msgstr ""

#: queen.vqe.get_measurement_sampler:1 of
msgid ""
"Returns a function which get the expectations by sampling the measured "
"circuit"
msgstr ""

#: queen.vqe.get_qiskit_sampler:1 of
msgid "Returns a function which get the expectation by sampling via Qiskit."
msgstr ""

#: queen.vqe.get_qiskit_sampler:3 of
msgid "This function requires `qiskit` module."
msgstr ""

#: queen.vqe.get_scipy_minimizer:1 of
msgid "Get minimizer which uses `scipy.optimize.minimize`"
msgstr ""

#: queen.vqe.get_state_vector_sampler:1 of
msgid "Returns a function which get the expectations by sampling the state vector"
msgstr ""

#: queen.vqe.non_sampling_sampler:1 of
msgid "Calculate the expectations without sampling."
msgstr ""

#: queen.vqe.sparse_expectation:1 of
msgid "Calculate expectation value <vec|mat|vec>."
msgstr ""

#: queen.vqe.sparse_expectation:4 of
msgid "mat (scipy sparse matrix): Sparse matrix vec (numpy array): Vector"
msgstr ""

#: queen.vqe.sparse_expectation:8 of
msgid ""
"(Real part of) expectation value <vec|mat|vec>. Remarks: when mat is "
"Hermitian, <vec|mat|vec> is real."
msgstr ""

#: ../../source/api/queen.rst:40
msgid "queen.wq module"
msgstr ""

#: queen.wq.Opt:1 of
msgid "Optimizer for SA/SQA."
msgstr ""

#: queen.wq.Opt.plot:1 of
msgid "Draws energy chart using matplotlib."
msgstr ""

#: queen.wq.Opt.run:1 of
msgid ""
"Run SA with provided QUBO.  Set qubo attribute in advance of calling this"
" method."
msgstr ""

#: queen.wq.Opt.sqa:1 of
msgid ""
"Run SQA with provided QUBO. Set qubo attribute in advance of calling this"
" method."
msgstr ""

#: queen.wq.Opt.E:1 of
msgid "List of energies"
msgstr ""

#: queen.wq.Opt.Gf:1 of
msgid "Final strength of transverse magnetic field. [SQA]"
msgstr ""

#: queen.wq.Opt.Gs:1 of
msgid "Initial strength of transverse magnetic field. [SQA]"
msgstr ""

#: queen.wq.Opt.R:1 of
msgid "Descreasing rate of temperature [SA]"
msgstr ""

#: queen.wq.Opt.RBMvisible:1 of
msgid "RBM Models"
msgstr ""

#: queen.wq.Opt.Tf:1 of
msgid "Final temperature [SA]. Temperature [SQA]"
msgstr ""

#: queen.wq.Opt.Ts:1 of
msgid "Initial temperature [SA]"
msgstr ""

#: queen.wq.Opt.ite:1 of
msgid "Iterations [SA]"
msgstr ""

#: queen.wq.Opt.qubo:1 of
msgid "QUBO"
msgstr ""

#: queen.wq.Opt.tro:1 of
msgid "Trotter slices [SQA]"
msgstr ""

#: queen.wq.diag:1 of
msgid "Create QUBO with diag from list"
msgstr ""

#: queen.wq.make_qs:1 of
msgid "Make sympy symbols q0, q1, ..."
msgstr ""

#: queen.wq.make_qs:5 of
msgid "n(int), m(int, optional):"
msgstr ""

#: queen.wq.make_qs of
msgid "If specified both n and m, returns [qn, q(n+1), ..., qm],"
msgstr ""

#: queen.wq.make_qs of
msgid "Only n is specified, returns[q0, q1, ..., qn]."
msgstr ""

#: queen.wq.make_qs:7 queen.wq.nbody_separation:9 of
msgid "Return:"
msgstr ""

#: queen.wq.make_qs:8 of
msgid "tuple(Symbol): Tuple of sympy symbols."
msgstr ""

#: queen.wq.nbody_separation:1 of
msgid "Convert n-body problem to 2-body problem."
msgstr ""

#: queen.wq.nbody_separation of
msgid "expr: sympy expressions to be separated."
msgstr ""

#: queen.wq.nbody_separation of
msgid "qs: sympy's symbols to be used as supplementary variable."
msgstr ""

#: queen.wq.nbody_separation:9 of
msgid ""
"new_expr(sympy expr), constraints(sympy expr), mapping(dict(str, str -> "
"Symbol)):"
msgstr ""

#: queen.wq.nbody_separation of
msgid ""
"`new_expr` is converted problem, `constraints` is constraints for "
"supplementary variable."
msgstr ""

#: queen.wq.nbody_separation of
msgid ""
"You may use `expr = new_expr + delta * constraints`, delta is floating "
"point variable."
msgstr ""

#: queen.wq.nbody_separation of
msgid "mapping is supplementary variable's mapping."
msgstr ""

#: queen.wq.net:1 of
msgid ""
"Automatically create QUBO which has value 1 for all connectivity defined "
"by array of edges and graph size N"
msgstr ""

#: queen.wq.net:12 of
msgid ""
"this create 4*4 QUBO and put value 1 on connection between 0th and 1st "
"qubit, 1st and 2nd qubit"
msgstr ""

#: queen.wq.pauli:1 of
msgid "Convert to pauli operators of universal gate model."
msgstr ""

#: queen.wq.qn_to_qubo:1 of
msgid "Convert Sympy's expr to QUBO."
msgstr ""

#: queen.wq.qn_to_qubo:4 of
msgid "expr: Sympy's quadratic expression with variable `q0`, `q1`, ..."
msgstr ""

#: queen.wq.qn_to_qubo:6 of
msgid "[[float]]: Returns QUBO matrix."
msgstr ""

#: queen.wq.rands:1 of
msgid "Create QUBO with random number"
msgstr ""

#: queen.wq.sel:1 of
msgid "Automatically create QUBO which select K qubits from N qubits"
msgstr ""

#: queen.wq.sel:13 of
msgid ""
"if you set array on the 3rd params, the result likely to choose the nth "
"qubit in the array"
msgstr ""

#: queen.wq.zeros:1 of
msgid "Create QUBO with all element value as 0"
msgstr ""

#: ../../source/api/queen.rst:48
msgid "Module contents"
msgstr ""

#: ../../source/api/modules.rst:2
msgid "API Reference"
msgstr ""

#~ msgid "queen"
#~ msgstr ""

#~ msgid ""
#~ ":params copy_backends :bool copy backends "
#~ "if True. copy_default_backend :bool copy "
#~ "default_backend if True"
#~ msgstr ""

#~ msgid ""
#~ ":params backend_name: str or None: new"
#~ " default backend name. if None is "
#~ "given, global setting is applied."
#~ msgstr ""

#~ msgid "\"XZIY\" => X(0) * Z(1) * Y(3)"
#~ msgstr ""

#~ msgid "From X, Y, Z, I to Term"
#~ msgstr ""

#~ msgid "Commute expr1 and expr2"
#~ msgstr ""

#~ msgid "\"X\" => X, \"Y\" => Y, \"Z\" => Z, \"I\" => I"
#~ msgstr ""

#~ msgid "Convert to Expr from Term or Pauli operator"
#~ msgstr ""

#~ msgid "Convert to Term from Pauli operator"
#~ msgstr ""

#~ msgid ""
#~ "name (str): The name of backend. "
#~ "gateclass (type): The type object of "
#~ "backend allow_overwrite (bool, optional): If"
#~ " True, allow to overwrite the "
#~ "existing backend."
#~ msgstr ""

#~ msgid ""
#~ "name (str): The name of gate. "
#~ "gateclass (type): The type object of "
#~ "gate. allow_overwrite (bool, optional): If "
#~ "True, allow to overwrite the existing"
#~ " gate."
#~ msgstr ""

#~ msgid ""
#~ "name (str): The name of macro. "
#~ "func (callable): The function to be "
#~ "called. allow_overwrite (bool, optional): If"
#~ " True, allow to overwrite the "
#~ "existing macro."
#~ msgstr ""

#~ msgid ""
#~ ":params copy_backends :bool copy backends "
#~ "if True. copy_default_backend :bool copy "
#~ "default_backend if True."
#~ msgstr ""

#~ msgid ""
#~ "shots (int, optional): The number of "
#~ "sampling the circuit. returns (str, "
#~ "optional):  The category of returns "
#~ "value."
#~ msgstr ""

#~ msgid "Control-X (CNOT) Gate"
#~ msgstr ""

#~ msgid "Control-Z gate"
#~ msgstr ""

#~ msgid "Hadamard Gate"
#~ msgstr ""

#~ msgid "Identity Gate"
#~ msgstr ""

#~ msgid "Measurement gate"
#~ msgstr ""

#~ msgid "Pauli's X Gate"
#~ msgstr ""

#~ msgid "Pauli's Y Gate"
#~ msgstr ""

#~ msgid "Pauli's Z Gate"
#~ msgstr ""

#~ msgid "Returns the maximum index of Pauli matrices in the Term."
#~ msgstr ""

#~ msgid ""
#~ "expr1 (Expr, Term or Pauli operator):"
#~ " Pauli's expression. expr2 (Expr, Term "
#~ "or Pauli operator): Pauli's expression."
#~ msgstr ""

#~ msgid ""
#~ "expr1 (Expr, Term or Pauli operator):"
#~ " Pauli's expression. expr2 (Expr, Term "
#~ "or Pauli operator): Pauli's expression. "
#~ "eps (float, optional): Machine epsilon."
#~ msgstr ""

#~ msgid "If |[expr1, expr2]| < eps, consider it is commutable."
#~ msgstr ""

#~ msgid ""
#~ "ch (str): \"X\" or \"Y\" or \"Z\""
#~ " or \"I\". n (int, optional): Make"
#~ " Pauli matrix as n-th qubits."
#~ msgstr ""

