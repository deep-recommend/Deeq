# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, MDR Inc.
# This file is distributed under the same license as the Blueqat package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: Blueqat \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-20 00:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/ising.rst:2
msgid "Ising/QUBO problem"
msgstr "Ising/QUBO 問題"

#: ../../source/ising.rst:4
msgid ""
"Blueqat wq module is a module for solbing Ising and Quadratic "
"Unconstrained Binary Optimization (QUBO) problems. It includes local "
"solver for Simulated Annealing (SA) and Simulated Quantum Annealing "
"(SQA). You can also submit problems to D-Wave cloud machine using wq "
"module."
msgstr ""
"Blueqat wq モジュールはイジング問題と制約なし二次形式二値変数最適化(QUBO)問題のためのモジュールです。ローカル環境で動作するシミュレーテッドアニーリング(SA)とシミュレーテッド量子アニーリング(SQA)のソルバーが組み込まれています。wq"
" モジュールを使用してD-Waveクラウドマシンに問題をサブミットすることも可能です。"

#: ../../source/ising.rst:9
msgid "What is Ising model"
msgstr "イジングモデルとは"

#: ../../source/ising.rst:11
msgid ""
"Real Quantum Annealing (QA) machines are built upon physical model called"
" Ising model, which can be computationally simulated on our laptops with "
"algorithms called Simulated Annealing (SA) or Simulated Quantum Annealing"
" (SQA). 1-dimensional Ising model is a 1D array of quantum bits (qubits),"
" each of them has a ‘spin’ of +1 (up) or -1 (down). 2-dimensional Ising "
"model is similar, it consists of a plainer lattice and has more adjacent "
"qubits than 1D. Although the complex physics may be overwhelming to you, "
"wq module let you easily calculate the model without knowing much about "
"them."
msgstr ""
"実際の量子アニーリング (QA) マシンはイジングモデルと呼ばれる物理モデルで構築されており、シミュレーテッドアニーリング (SA) "
"またはシミュレーテッド量子アニーリング(SQA)と呼ばれるアルゴリズムをパソコン上でシミュレートすることが可能です一次元イジングモデルは量子ビット(qubits)の一次元配列であり、それぞれが+1"
" (up) か-1 (down) "
"のスピンを持ちます。二次元イジングモデルも同様に平面格子から成り、一次元イジングモデルよりも多くの隣接量子ビットを持ちます。これらの物理は複雑なので圧倒されるかもしれませんが、wq"
" moduleはそれらの知識が無くとも簡単にモデルの計算を行うことができます。"

#: ../../source/ising.rst:19
msgid "Combinatorial Optimization problem and SA"
msgstr "組合せ最適化問題とシミュレーテッドアニーリング"

#: ../../source/ising.rst:21
msgid ""
"Simulated Annealing (SA) can be used to solve combinatorial optimization "
"problems of some forms, and Ising model is one of them. Metropolis "
"sampling based Monte-Carlo methods are used in such procedures."
msgstr "シミュレーテッドアニーリング(SA)はいくつかの形式の組合せ最適化問題を解くのに用いられます。イジングモデルはそのうちの一つです。そのような問題を解く手順の中で、モンテカルロ法に基づいたメトロポリスサンプリングが使用されます。"

#: ../../source/ising.rst:26
msgid "Hamiltonian"
msgstr "ハミルトニアン"

#: ../../source/ising.rst:28
msgid ""
"To solve Ising model with SA, we have to set Jij/hi which describes how "
"strong a pair of qubits are coupled, and how strong a qubit is biased, "
"respectively."
msgstr "SAを用いてイジングモデルを解くために、Jij/hiを設定しなければなりません。これらは、量子ビットのペアがどれほど強く相互作用しているか、一つの量子ビットにどれほどの磁場がかかっているかをそれぞれ表しています。"

#: ../../source/ising.rst:32
msgid "Simulated Annealing and Simulated Quantum Annealing"
msgstr "シミュレーテッドアニーリングとシミュレーテッド量子アニーリング"

#: ../../source/ising.rst:34
msgid ""
"We also have algorithm called Simulated Quantum Annealing(SQA) to solve "
"Ising problems, in which quantum effects are taken into account. The "
"effect of quantum superposition is approximated by the parallel execution"
" of different world-line, by which we can effectively simulate wilder "
"quantum nature. Technically, path-integral methods based on Suzuki-"
"Trotter matrix decomposition are used in the algorithm."
msgstr ""
"イジング問題を解くためのシミュレーテッド量子アニーリング(SQA)と呼ばれるアルゴリズムもあります。この手法では量子効果を考慮に入れています。量子重ね合わせ効果は異なる世界線での並列実行によって近似され、より自然に近い量子の性質を効率的にシミュレートすることが可能です。"
" 技術的には、鈴木-トロッタ分解に基づく経路積分法が使用されています。"

#: ../../source/ising.rst:41
msgid "Checking and Verifying solutions"
msgstr "解の確認と検証"

#: ../../source/ising.rst:43
msgid ""
"We can calculate how good (or bad) a solution is by calculating ‘Energy’ "
"of the solution, which can be done by a wq module one-liner. Repeatedly "
"solving Ising model, comparing that energy may let you know which is the "
"best, or better answer to the problem. If the problem is of NP, then "
"checking whether the constraints are fulfilled can also be calculated in "
"polynomial time."
msgstr ""
"解の「エネルギー」を計算することで解の良し悪しを割り出すことができ、wq "
"moduleではこれを一行(のプログラム)で実行可能です。繰り返しイジングモデルを解いた後、エネルギーを比較してどれがその問題にとって最良またはより良い解であるかを知ることが可能です。もしNP問題なら、制約が満たされているかどうかを確認することで多項式時間で計算することも可能です。"

#: ../../source/ising.rst:49
msgid "QUBO"
msgstr ""

#: ../../source/ising.rst:51
msgid ""
"Ising model problems are represented by Quadratic Unconstrained Binary "
"Optimization (QUBO) problems. Although variables in combinatorial "
"optimization problems are of {0, 1}, quantum spins above are represented "
"by {-1, 1}, so we have to transform their representation. wq module can "
"automatically handle them, so you do not have to know about {-1, 1} "
"things."
msgstr ""
"イジングモデルの問題は二次非制約二項最適化問題(QUBO)によって表現されます。組み合わせ最適化問題では変数は{0, "
"1}で表しますが、上述の量子スピンは{-1, 1}によって表現されるので、表現を変換しなければなりません。 wq "
"moduleは自動的にそれらの変換を行うため、みなさんがその変換について知っている必要はありません。"

#: ../../source/ising.rst:56
msgid "Learn more about QUBO"
msgstr "QUBOについてより学ぶ"

#: ../../source/ising.rst:58
msgid "Let's learn more about QUBO here."
msgstr "ここでQUBOについてより深くみてみましょう。"

#: ../../source/ising.rst:60
msgid ""
"Now there are three boxes labeled :math:`x_{0}, x_{1}, x_{2}` and we "
"think the problem to choose some boxes from them."
msgstr ""
"箱の表にそれぞれ :math:`x_{0}, x_{1}, x_{2}` "
"と書かれた3つの箱があるときに、その中からいくつかの箱を選ぶ問題を考えます。"

#: ../../source/ising.rst:62
msgid ""
"First, we define the box's value = 1 when the box is chosen, and value = "
"0 otherwise. For example when you choose :math:`x_{0}`, box's values are "
":math:`x_{0} = 1, x_{1} = 0, x_{2} = 0`. This can be represented as "
"computer friendly array format [1, 0, 0]."
msgstr ""
"まず、箱が選ばれた場合を1、選ばれなかった場合を0と決めます。:math:`x_{0}` の箱を選んだ場合、 :math:`x_{0} = 1, "
"x_{1} = 0, x_{2} = 0` と表現します。コンピュータで扱い易いように、これを配列で表現すると[1,0,0]のようになります。"

#: ../../source/ising.rst:66
msgid ""
"Next, we define the problem we want to solve \"choose two from three "
"boxes.\" We must think of a function E(x) for the problem, which takes "
"minimum value when the problem is solved. We use the following function:"
msgstr "今回解きたい問題が「3個から任意の2個を選ぶ」という問題だとします。この問題を解くために関数E(x)を考えるのですが、正しい選び方をした場合に関数E(x)が最小になるような関数を考えます。今回は、次の関数を考えました。"

#: ../../source/ising.rst:70
msgid "E(x) = (x_{0} + x_{1} + x_{2} - 2) ^ 2"
msgstr ""

#: ../../source/ising.rst:73
msgid "Let's check the results:"
msgstr "どうなるか見てみましょう。"

#: ../../source/ising.rst:75
msgid ""
"If you choose :math:`x_{0}` alone, :math:`E(x) = (1 + 0 + 0 - 2) ^ 2 = "
"(-1) ^ 2 = 1`"
msgstr ""
" :math:`x_{0}` だけ選んだ場合、 :math:`E(x) = (1 + 0 + 0 - 2) ^ 2 = (-1) ^ 2 = 1`"
" になります。"

#: ../../source/ising.rst:76
msgid ""
"If you choose :math:`x_{0}` and :math:`x_{1}`, :math:`E(x) = (1 + 1 + 0 -"
" 2) ^ 2 = (0) ^ 2 = 0`"
msgstr ""
" :math:`x_{0}` と  :math:`x_{1}`を選んだ場合、:math:`E(x) = (1 + 1 + 0 - 2) ^ 2 ="
" (0) ^ 2 = 0` になります。"

#: ../../source/ising.rst:77
msgid "If you choose all, :math:`E(x) = (1 + 1 + 1 - 2) ^ 2 = (1) ^ 2 = 1`"
msgstr "3つとも選んだ場合、 :math:`E(x) = (1 + 1 + 1 - 2) ^ 2 = (1) ^ 2 = 1` になります。"

#: ../../source/ising.rst:79
msgid ""
"The minimum value of E(x) is 0 when you choose two of three, so you can "
"confirm the E(x) above is the appropriate function for solving this "
"problem. Let's expand this E(x) as the following:"
msgstr "2つ選んだときだけ、最小値である0をとりますので、ここで考えたE(x)はこの問題を解くために最適な関数のようです。このE(x)を少し展開していきます。"

#: ../../source/ising.rst:82
msgid ""
"E(x) &= (x_{0} + x_{1} + x_{2} - 2) ^ 2 \\\\      &= (x_{0} + x_{1} + "
"x_{2} - 2) (x_{0} + x_{1} + x_{2} - 2) \\\\      &= x_{0} ^ 2 + x_{1} ^ 2"
" + x_{2} ^ 2 + 2 x_{0} x_{1} + 2 x_{0} x_{2} + 2 x_{1} x_{2} - 4 x_{0} - "
"4 x_{1} - 4 x_{2} + 4"
msgstr ""

#: ../../source/ising.rst:88
msgid ""
"Remember that :math:`x` takes 0 or 1. So we can use the equation :math:`x"
" = x ^ 2 = x x`. Apply it to E(x)."
msgstr ""
"ここで、 :math:`x` は0か1の値しか取らないことを思い出してください。その場合、:math:`x = x ^ 2 = x x` "
"と変換することができます。 それを使うと上記の式は、さらに次のように変形できます。"

#: ../../source/ising.rst:91
msgid ""
"E(x) &= x_{0} ^ 2 + x_{1} ^ 2 + x_{2} ^ 2 + 2 x_{0} x_{1} + 2 x_{0} x_{2}"
" + 2 x_{1} x_{2} - 4 x_{0} - 4 x_{1} - 4 x_{2} + 4 \\\\      &= x_{0} ^ 2"
" + x_{1} ^ 2 + x_{2} ^ 2 + 2 x_{0} x_{1} + 2 x_{0} x_{2} + 2 x_{1} x_{2} "
"- 4 x_{0} x_{0} - 4 x_{1} x_{1} - 4 x_{2} x_{2} + 4 \\\\      &= -3 x_{0}"
" x_{0} −3 x_{1} x_{1} -3 x_{2} x_{2} + 2 x_{0} x_{1} + 2 x_{0} x_{2} + 2 "
"x_{1} x_{2} + 4"
msgstr ""

#: ../../source/ising.rst:97
msgid ""
"Next, we want to convert function E(x) to a matrix which shapes like the "
"following."
msgstr "ここで、上記のE(x)を計算するために、次の様なマトリックスを考えます。"

#: ../../source/ising.rst:1
msgid ":math:`x_{0}`"
msgstr ""

#: ../../source/ising.rst:1
msgid ":math:`x_{1}`"
msgstr ""

#: ../../source/ising.rst:1
msgid ":math:`x_{2}`"
msgstr ""

#: ../../source/ising.rst:107
msgid ""
"The first term of the last line of E(x) above multiplys :math:`x_{0}` and"
" :math:`x_{0}`, then multiplys the product and -3. So put -3 in the "
"intersection cell of :math:`x_{0}` and :math:`x_{0}` like this:"
msgstr ""
"上記の式の最初の部分は :math:`x_{0}` と :math:`x_{0}` "
"をかけたものを-3倍するということですよね。なので、マトリックスの :math:`x_{0}` と :math:`x_{0}` "
"が交わるところに-3と入れます。"

#: ../../source/ising.rst:1
msgid "-3"
msgstr ""

#: ../../source/ising.rst:118
msgid ""
"For the second and third term, put -3 in the intersection cell of "
":math:`x_{1}` and :math:`x_{1}`, :math:`x_{2}` and :math:`x_{2}`."
msgstr ""
"次の2つも :math:`x_{1}` と :math:`x_{1}` の交点、 :math:`x_{2}` と :math:`x_{2}` "
"の交点にそれぞれ-3を入れます。"

#: ../../source/ising.rst:128
msgid ""
"The next term multiplys :math:`x_{0}` and :math:`x_{1}`, then multiplys "
"the product and 2. So put 2 in the intersection cell of :math:`x_{0}` and"
" :math:`x_{1}`."
msgstr ""
"その次は :math:`x_{0}` と :math:`x_{1}` をかけたものを2倍するということなので、 :math:`x_{0}` と "
":math:`x_{1}` が交わるところに2といれます。"

#: ../../source/ising.rst:1
msgid "2"
msgstr ""

#: ../../source/ising.rst:139
msgid ""
"For the next two terms, put 2 in the intersection cell of :math:`x_{0}` "
"and :math:`x_{2}`, :math:`x_{1}` and :math:`x_{2}`. And we can ignore the"
" last term 4, because it is not affect to find the minimum value of E(x) "
"with the combination of :math:`x_{i}`."
msgstr ""
"次の2つも :math:`x_{0}` と :math:`x_{2}` の交点、 :math:`x_{1}` と :math:`x_{2}` "
"の交点にそれぞれ2を入れます。最後の4は定数なので、エネルギーの最小値を求める際には影響しないので、無視します。"

#: ../../source/ising.rst:142
msgid ""
"As a result of the steps above, the matrix is finally the following "
"shape. This is the QUBO to solve \"choose two from three boxes.\""
msgstr "結果としてできたマトリックスはつぎのようになります。実はこれが「3つの箱から任意の2つを選ぶ」問題を解くためのQUBOなのです。"

#: ../../source/ising.rst:152
msgid "Use Simulated Annealing of wq module to solve this problem:"
msgstr "このQUBOを使ってwqモジュールのシミュレーティッドアニーリングに解かせるコードは次のようになります。"

#: ../../source/ising.rst:162
msgid ""
"Run the program and you will get the result [1, 1, 0]. This means "
":math:`x_{0}, x_{1}` are chosen. You will find the problem is solved "
"correctly."
msgstr ""
"実行してみると、[1,1,0]と表示されました。これは :math:`x_{0}, x_{1}` "
"が選ばれたことを表します。「3つの箱から任意の2つを選ぶ」問題がちゃんと解けていますね。 今回の場合、実行する毎に違う答えが表示されます。 "
"それは、今回の問題が、3つの箱から2つを選ぶ問題であり、その答えは実際に3通りあるからです。"

#: ../../source/ising.rst:166
msgid "Steps to solve the QUBO problem is:"
msgstr "問題の解き方を整理すると次のようになります。"

#: ../../source/ising.rst:168
msgid "Define E(x) that takes minimum value when the problem is solved."
msgstr "その問題が解けたときに、最小になる関数E(x)を考えます。"

#: ../../source/ising.rst:170
msgid "Convert E(x) to QUBO matrix."
msgstr "E(x)を式展開してQUBOマトリックスを作成します。"

#: ../../source/ising.rst:172
msgid ""
"Supply the QUBO matrix to wq module and solve the problem with Simulated "
"Annealing (SA)."
msgstr "QUBOマトリックスをwq moduleに与えて、シミュレーティッドアニーリングで解かせます。"

#: ../../source/ising.rst:174
msgid ""
"The most difficult step is 1., but you can find many useful examples in "
"our :doc:`../tutorial`."
msgstr ""
"この中で難しいのは1.ですが、:doc:`../tutorial` "
"に問題とその関数の例が多数掲載されていますので、その中から合うものを見つけると良いでしょう。"

#: ../../source/ising.rst:177
msgid ""
"Define the row number of QUBO matrix as :math:`i` and the column number "
"as :math:`j`, and each cell value as :math:`Q_{ij}`. So the E(x) can be "
"represented as:"
msgstr ""
"QUBOの行番号を :math:`i` 、列番号を :math:`j` とし、QUBOの各要素を :math:`Q_{ij}` "
"と表すとE(x)は次の様に表現できます。"

#: ../../source/ising.rst:180
msgid "E(x) = \\sum_{i} \\sum_{j} Q_{ij} x_{i} x_{j}"
msgstr ""

#: ../../source/ising.rst:184
msgid ""
"Actually this :math:`Q_{ij}` is QUBO. You can find the last equation "
"calculating E(x) above shapes this form."
msgstr ""
"ここで :math:`Q_{ij}` "
"がまさにQUBOです。上の方でE(x)を計算している最後の式をよく見てみると、この形になっていることが分かると思います。"

#: ../../source/ising.rst:186
msgid ""
"See also `Wikipedia "
"<https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`_."
msgstr ""
"`Wikipedia "
"<https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization>`_"
" の説明（英語）も参考にしてください。"

#~ msgid ""
#~ "Real Quantum Annealing (QA) machines are"
#~ " built upon physical model called "
#~ "Ising model, which can be "
#~ "computationallysimulated on our laptops with"
#~ " algorithms called Simulated Annealing (SA)"
#~ " or Simulated Quantum Annealing (SQA)."
#~ msgstr ""
#~ "実際の量子アニーリング (QA) "
#~ "マシンはイジングモデルと呼ばれる物理モデルで構築されており、シミュレーテッドアニーリング (SA) "
#~ "またはシミュレーテッド量子アニーリング(SQA)と呼ばれるアルゴリズムをパソコン上でシミュレートすることが可能です。"

#~ msgid ""
#~ "1-dimensional Ising model is a 1D "
#~ "array of quantum bits (qubits), each "
#~ "of them has a ‘spin’ of +1 "
#~ "(up) or -1 (down)."
#~ msgstr " 一次元イジングモデルは量子ビット(qubits)の一次元配列であり、それぞれが+1 (up) か-1 (down) のスピンを持ちます。"

#~ msgid ""
#~ "2-dimensional Ising model is similar, it"
#~ " consists of a plainer lattice and"
#~ " has more adjacent qubits than 1D."
#~ msgstr "二次元イジングモデルも同様に平面格子から成り、一次元イジングモデルよりも多くの隣接量子ビットを持ちます。 "

#~ msgid ""
#~ "Although the complex physics may be "
#~ "overwhelming to you, wq module let "
#~ "you easily calculate the model without"
#~ " knowing much about them."
#~ msgstr "これらの物理は複雑なので圧倒されるかもしれませんが、wq moduleはそれらの知識が無くとも簡単にモデルの計算を行うことができます。"

#~ msgid ""
#~ "Metropolis sampling based Monte-Carlo "
#~ "methods are used in such procedures."
#~ msgstr "そのような問題を解く手順の中で、モンテカルロ法に基づいたメトロポリスサンプリングが使用されます。"

#~ msgid ""
#~ "We also have algorithm called Simulated"
#~ " Quantum Annealing(SQA) to solve Ising "
#~ "problems, in which quantum effects are"
#~ " taken into account."
#~ msgstr "イジング問題を解くためのシミュレーテッド量子アニーリング(SQA)と呼ばれるアルゴリズムもあります。この手法では量子効果を考慮に入れています。"

#~ msgid ""
#~ "The effect of quantum superposition is"
#~ " approximated by the parallel execution "
#~ "of different world-line,by which we "
#~ "can effectively simulate wilder quantum "
#~ "nature. "
#~ msgstr "量子重ね合わせ効果は異なる世界線での並列実行によって近似され、より自然に近い量子の性質を効率的にシミュレートすることが可能です。 "

#~ msgid ""
#~ "Technically, path-integral methods based "
#~ "on Suzuki-Trotter matrix decomposition "
#~ "are used in the algorithm."
#~ msgstr "技術的には、鈴木-トロッタ分解に基づく経路積分法が使用されています。"

#~ msgid ""
#~ "We can calculate how good (or bad)"
#~ " a solution is by calculating "
#~ "‘Energy’ of the solution, which can "
#~ "be done by a wq module one-"
#~ "liner."
#~ msgstr "解の「エネルギー」を計算することで解の良し悪しを割り出すことができ、wq moduleではこれを一行(のプログラム)で実行可能です。"

#~ msgid ""
#~ "Repeatedly solving Ising model, comparing "
#~ "that energy may let you know which"
#~ " is the best, or better answer "
#~ "to the problem."
#~ msgstr "繰り返しイジングモデルを解いた後、エネルギーを比較してどれがその問題にとって最良またはより良い解であるかを知ることが可能です。 "

#~ msgid ""
#~ "If the problem is of NP, then "
#~ "checking whether the constraints are "
#~ "fulfilled can also be calculated in "
#~ "polynomial time."
#~ msgstr "もしNP問題なら、制約が満たされているかどうかを確認することで多項式時間で計算することも可能です。"

#~ msgid ""
#~ "Ising model problems are represented by"
#~ " Quadratic Unconstrained Binary Optimization "
#~ "(QUBO) problems."
#~ msgstr "イジングモデルの問題は二次非制約二項最適化問題(QUBO)によって表現されます。 "

#~ msgid ""
#~ "First, we define the box's value ="
#~ " 1 when the box is chosen, and"
#~ " value = 0 otherwise. "
#~ msgstr "まず、箱が選ばれた場合を1、選ばれなかった場合を0と決めます。"

#~ msgid ""
#~ "For example when you choose "
#~ ":math:`x_{0}`, box's values are :math:`x_{0}"
#~ " = 1, x_{1} = 0, x_{2} = "
#~ "0`."
#~ msgstr ":math:`x_{0}` の箱を選んだ場合、 :math:`x_{0} = 1, x_{1} = 0, x_{2} = 0` と表現します。"

#~ msgid "This can be represented as computer friendly array format [1, 0, 0]."
#~ msgstr "コンピュータで扱い易いように、これを配列で表現すると[1,0,0]のようになります。"

#~ msgid ""
#~ "Next, we define the problem we "
#~ "want to solve \"choose two from "
#~ "three boxes.\""
#~ msgstr "今回解きたい問題が「3個から任意の2個を選ぶ」という問題だとします。 "

#~ msgid "We use the following function:"
#~ msgstr "今回は、次の関数を考えました。"

#~ msgid "Let's expand this E(x) as the following:"
#~ msgstr "このE(x)を少し展開していきます。"

#~ msgid "Remember that :math:`x` takes 0 or 1."
#~ msgstr "ここで、 :math:`x` は0か1の値しか取らないことを思い出してください。"

#~ msgid ""
#~ "The first term of the last line"
#~ " of E(x) above multiplys :math:`x_{0}` "
#~ "and :math:`x_{0}`, then multiplys the "
#~ "product and -3. "
#~ msgstr "上記の式の最初の部分は :math:`x_{0}` と :math:`x_{0}` をかけたものを-3倍するということですよね。"

#~ msgid ""
#~ "So put -3 in the intersection cell"
#~ " of :math:`x_{0}` and :math:`x_{0}` like"
#~ " this:"
#~ msgstr "なので、マトリックスの :math:`x_{0}` と :math:`x_{0}` が交わるところに-3と入れます。"

#~ msgid ""
#~ "For the next two terms, put 2 "
#~ "in the intersection cell of "
#~ ":math:`x_{0}` and :math:`x_{2}`, :math:`x_{1}` "
#~ "and :math:`x_{2}`."
#~ msgstr ""
#~ "次の2つも :math:`x_{0}` と :math:`x_{2}` の交点、 "
#~ ":math:`x_{1}` と :math:`x_{2}` の交点にそれぞれ2を入れます。 "

#~ msgid "You will find the problem is solved correctly."
#~ msgstr ""
#~ "「3つの箱から任意の2つを選ぶ」問題がちゃんと解けていますね。 今回の場合、実行する毎に違う答えが表示されます。 "
#~ "それは、今回の問題が、3つの箱から2つを選ぶ問題であり、その答えは実際に3通りあるからです。"

